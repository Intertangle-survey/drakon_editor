// Autogenerated with DRAKON Editor 1.28


function Quadric_a() {
    
}

function Quadric_b() {
    
}

function Quadric_c() {
    
}

function Quadric_discriminant() {
    // item 41
    var b = this.b()
    var a = this.a()
    var c = this.c()
    // item 40
    return b * b - 4 * a * c
}

function Quadric_numberOfRoots() {
    // item 42
    if (this.discriminant() > 0) {
        // item 45
        return 2
    } else {
        // item 46
        if (this.discriminant() == 0) {
            // item 49
            return 0
        } else {
            // item 48
            return 1
        }
    }
}

function Quadric_x1() {
    // item 50
    if (this.numberOfRoots() == 0) {
        // item 53
        return null
    } else {
        // item 60
        var b = this.b()
        var a = this.a()
        var discriminant = this.discriminant()
        // item 54
        return (-b + Math.sqrt(discriminant)) / (2 * a)
    }
}

function Quadric_x2() {
    // item 55
    if (this.numberOfRoots() < 2) {
        // item 58
        return null
    } else {
        // item 62
        var b = this.b()
        var a = this.a()
        var discriminant = this.discriminant()
        // item 61
        return (-b - Math.sqrt(discriminant)) / (2 * a)
    }
}

function Quadric() {
    this._a = null
    this.a = function(newValue) {
        if (typeof newValue != "undefined") {
            this._a = newValue
            return
        }
        return this._a
    }
    this._b = null
    this.b = function(newValue) {
        if (typeof newValue != "undefined") {
            this._b = newValue
            return
        }
        return this._b
    }
    this._c = null
    this.c = function(newValue) {
        if (typeof newValue != "undefined") {
            this._c = newValue
            return
        }
        return this._c
    }
    this._discriminant = null
    this.discriminant = function() {
        var value = this._discriminant
        if (value != null) {
            return value
        }
        value = Quadric_discriminant.call(this)
        this._discriminant = value
        return value
    }
    this._numberOfRoots = null
    this.numberOfRoots = function() {
        var value = this._numberOfRoots
        if (value != null) {
            return value
        }
        value = Quadric_numberOfRoots.call(this)
        this._numberOfRoots = value
        return value
    }
    this._x1 = null
    this.x1 = function() {
        var value = this._x1
        if (value != null) {
            return value
        }
        value = Quadric_x1.call(this)
        this._x1 = value
        return value
    }
    this._x2 = null
    this.x2 = function() {
        var value = this._x2
        if (value != null) {
            return value
        }
        value = Quadric_x2.call(this)
        this._x2 = value
        return value
    }
}



