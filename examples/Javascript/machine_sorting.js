// Autogenerated with DRAKON Editor 1.29


function BubleSorter_AfterSwap_default(self, array) {
    // item 204
    self.state = "AfterSwap"
}

function BubleSorter_AfterSwap_goNext(self, array) {
    // item 194
    if (self.context.reachedEnd()) {
        // item 200
        self.context.currentIndex(0)
        // item 199
        self.state = "NotSwapped"
    } else {
        // item 197
        if (self.context.outOfOrder()) {
            // item 202
            swap(self.context)
        } else {
            
        }
        // item 196
        move(self.context)
        // item 171
        self.state = "AfterSwap"
    }
}

function BubleSorter_CleanUp(self, array) {
    
}

function BubleSorter_NotSwapped_goNext(self, array) {
    // item 180
    if (self.context.reachedEnd()) {
        // item 205
        self.done = true
        // item 182
        self.state = null;
    } else {
        // item 184
        if (self.context.outOfOrder()) {
            // item 201
            swap(self.context)
            // item 187
            move(self.context)
            // item 188
            self.state = "AfterSwap"
        } else {
            // item 183
            move(self.context)
            // item 168
            self.state = "NotSwapped"
        }
    }
}

function BubleSorter_NotSwapped_init(self, array) {
    // item 185
    self.context = new SortContext()
    self.context.array(array)
    self.context.currentIndex(0)
    // item 179
    self.state = "NotSwapped"
}

function bubbleSort(array) {
    // item 126
    var machine = new BubleSorter()
    // item 127
    machine.init(array)
    while (true) {
        // item 128
        if (machine.done) {
            break;
        } else {
            
        }
        // item 132
        machine.goNext()
    }
}

function move(self) {
    // item 219
    var i2 = self.currentIndex() + 1
    self.currentIndex(i2)
}

function swap(self) {
    // item 211
    var current = self.currentValue()
    var next = self.nextValue()
    // item 212
    var array = self.array()
    // item 213
    array[self.currentIndex()] = next
    array[self.nextIndex()] = current
}

function testSort(array) {
    // item 225
    var old = array.slice()
    // item 226
    bubbleSort(array)
    // item 227
    console.log(old)
    console.log(array)
    // item 228
    console.log()
}

function SortContext__p_currentValue() {
    // item 137
    return this.array()[this.currentIndex()]
}

function SortContext__p_nextIndex() {
    // item 141
    return this.currentIndex() + 1
}

function SortContext__p_nextValue() {
    // item 145
    return this.array()[this.nextIndex()]
}

function SortContext__p_outOfOrder() {
    // item 156
    return this.currentValue() > this.nextValue()
}

function SortContext__p_reachedEnd() {
    // item 152
    return this.nextIndex() >= this.array().length
}

function SortContext() {
    this._array = null
    this.array = function(newValue) {
        if (typeof newValue != "undefined") {
            this._array = newValue
            this._currentValue = null
            this._nextValue = null
            this._outOfOrder = null
            this._reachedEnd = null
            return
        }
        return this._array
    }
    this._currentIndex = null
    this.currentIndex = function(newValue) {
        if (typeof newValue != "undefined") {
            this._currentIndex = newValue
            this._currentValue = null
            this._nextIndex = null
            this._nextValue = null
            this._outOfOrder = null
            this._reachedEnd = null
            return
        }
        return this._currentIndex
    }
    this._currentValue = null
    this.currentValue = function() {
        var value = this._currentValue
        if (value != null) {
            return value
        }
        value = SortContext__p_currentValue.call(this)
        this._currentValue = value
        return value
    }
    this._nextIndex = null
    this.nextIndex = function() {
        var value = this._nextIndex
        if (value != null) {
            return value
        }
        value = SortContext__p_nextIndex.call(this)
        this._nextIndex = value
        return value
    }
    this._nextValue = null
    this.nextValue = function() {
        var value = this._nextValue
        if (value != null) {
            return value
        }
        value = SortContext__p_nextValue.call(this)
        this._nextValue = value
        return value
    }
    this._outOfOrder = null
    this.outOfOrder = function() {
        var value = this._outOfOrder
        if (value != null) {
            return value
        }
        value = SortContext__p_outOfOrder.call(this)
        this._outOfOrder = value
        return value
    }
    this._reachedEnd = null
    this.reachedEnd = function() {
        var value = this._reachedEnd
        if (value != null) {
            return value
        }
        value = SortContext__p_reachedEnd.call(this)
        this._reachedEnd = value
        return value
    }
}
function BubleSorter() {
  this.type_name = "BubleSorter";
  this.state = "NotSwapped";
  this.goNext = function(array) {
    var _state_ = this.state
    if (_state_ == "NotSwapped") {
      BubleSorter_NotSwapped_goNext(this, array)
    }
    else if (_state_ == "AfterSwap") {
      BubleSorter_AfterSwap_goNext(this, array)
    }
  }
  this.init = function(array) {
    var _state_ = this.state
    if (_state_ == "NotSwapped") {
      BubleSorter_NotSwapped_init(this, array)
    }
    else if (_state_ == "AfterSwap") {
      BubleSorter_AfterSwap_default(this, array)
    }
  }
}

testSort([])
testSort([1, 1, 1, 1, 1])
testSort([1, 2, 3, 4, 5])
testSort([5, 4, 3, 2, 1])
testSort([13, 30, 1, 3, 5, 2, 3])
